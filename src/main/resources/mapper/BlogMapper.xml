<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.june.dao.BlogMapper" >
  <resultMap id="BaseResultMap" type="Blog" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="title" property="title" jdbcType="VARCHAR" />
    <result column="release_date" property="releaseDate" jdbcType="TIMESTAMP" />
    <result column="review" property="review" jdbcType="INTEGER" />
    <result column="keyword" property="keyword" jdbcType="VARCHAR" />
    <result column="summary" property="summary" jdbcType="VARCHAR" />
    <result column="reading" property="reading" jdbcType="INTEGER" />
    <result column="image" property="image" jdbcType="VARCHAR" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="Blog" extends="BaseResultMap" >
    <result column="content" property="content" jdbcType="LONGVARCHAR" />
    <association column="type_id" property="blogType" select="com.june.dao.BlogTypeMapper.selectByPrimaryKey"/>
  </resultMap>
  <sql id="Base_Column_List" >
    id, title, release_date, review, keyword, summary, reading, type_id,image
  </sql>
  <sql id="Blob_Column_List" >
    content
  </sql>
  
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="Integer" >
    SELECT b.*, 
    (SELECT COUNT(c.id) FROM comment c WHERE c.blog_id = b.id AND c.is_pass = 1) AS commentsCount
    FROM blog b
    WHERE b.id = #{id,jdbcType=INTEGER}
  </select>
  
  <delete id="deleteByPrimaryKey" parameterType="Integer" >
    DELETE FROM blog
    WHERE id = #{id,jdbcType=INTEGER}
  </delete>
  
  <insert id="insertSelective" parameterType="Blog" >
    <selectKey order="AFTER" resultType="int">
        SELECT LAST_INSERT_ID()
    </selectKey>
    INSERT INTO blog
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="title != null" >
        title,
      </if>
      <if test="releaseDate != null" >
        release_date,
      </if>
      <if test="review != null" >
        review,
      </if>
      <if test="keyword != null" >
        keyword,
      </if>
      <if test="summary != null" >
        summary,
      </if>
      <if test="reading != null" >
        reading,
      </if>
      <if test="typeId != null" >
        type_id,
      </if>
      <if test="content != null" >
        content,
      </if>
      <if test="image != null" >
        image
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="title != null" >
        #{title,jdbcType=VARCHAR},
      </if>
      <if test="releaseDate != null" >
        #{releaseDate,jdbcType=TIMESTAMP},
      </if>
      <if test="review != null" >
        #{review,jdbcType=INTEGER},
      </if>
      <if test="keyword != null" >
        #{keyword,jdbcType=VARCHAR},
      </if>
      <if test="summary != null" >
        #{summary,jdbcType=VARCHAR},
      </if>
      <if test="reading != null" >
        #{reading,jdbcType=INTEGER},
      </if>
      <if test="typeId != null" >
        #{typeId,jdbcType=INTEGER},
      </if>
      <if test="content != null" >
        #{content,jdbcType=LONGVARCHAR},
      </if>
      <if test="image != null" >
        #{image,jdbcType=VARCHAR}
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="Blog" >
    UPDATE blog
    <set>
      <if test="title != null" >
        title = #{title,jdbcType=VARCHAR},
      </if>
      <if test="releaseDate != null" >
        release_date = #{releaseDate,jdbcType=TIMESTAMP},
      </if>
      <if test="review != null" >
        review = #{review,jdbcType=INTEGER},
      </if>
      <if test="keyword != null" >
        keyword = #{keyword,jdbcType=VARCHAR},
      </if>
      <if test="summary != null" >
        summary = #{summary,jdbcType=VARCHAR},
      </if>
      <if test="reading != null" >
        reading = #{reading,jdbcType=INTEGER},
      </if>
      <if test="typeId != null" >
        type_id = #{typeId,jdbcType=INTEGER},
      </if>
      <if test="content != null" >
        content = #{content,jdbcType=LONGVARCHAR},
      </if>
      <if test="image != null" >
        image = #{image,jdbcType=VARCHAR}
      </if>
    </set>
    WHERE id = #{id,jdbcType=INTEGER}
  </update>
  
  <!-- 将指定博客类别下的所有博客置为默认分类 -->
  <update id="moveBlogToDefaultType" parameterType="Integer" >
    UPDATE blog
    SET type_id = 1
    WHERE id IN (SELECT id FROM blog_type WHERE type_id = #{typeId,jdbcType=INTEGER})
  </update>
  
  <!-- 查询条件 -->
  <sql id="WhereClause">
  	<where>
  		<if test="id!=null and id!=''">
  			AND b.id = #{id}
  		</if>
  		<if test="title!=null and title!=''">
  			AND b.title LIKE CONCAT('%',#{title},'%')
  		</if>
  		<if test="typeId!=null and typeId!=''">
  			AND b.type_id = #{typeId}
  		</if>
  		<if test="firstDate!=null and firstDate!=''">
  			AND b.release_date &gt;= #{firstDate}
  		</if>
  		<if test="secondDate!=null and secondDate!=''">
  			AND b.release_date &lt;= #{secondDate}
  		</if>
  		<if test="releaseDate!=null and releaseDate!=''">
  			AND DATE_FORMAT(b.release_date,'%Y%m') = #{releaseDate}
  		</if>
  	</where>
  </sql>
  
  <!-- 浏览量加一 -->
  <update id="increaseReading" parameterType="Integer">
    UPDATE blog SET reading = reading + 1 WHERE id = #{id} 
  </update>
  
  <!-- 评论数加一 
  <update id="increaseReview" parameterType="Integer">
    UPDATE blog SET review = review + 1 WHERE id = #{id} 
  </update>
  
  评论数减一
  <update id="decreaseReview" parameterType="Integer">
    UPDATE blog SET review = review - 1 WHERE id = #{id} and review > 0
  </update> -->
  
  <!-- 批量删除 -->
  <delete id="batchDelete" parameterType="Integer">
    DELETE from blog
    WHERE id IN
    <foreach item="id" collection="array" open="(" separator="," close=")">
        #{id}
    </foreach>
  </delete>
  
  <!-- 查询所有博客并按时间降序排列 -->
  <select id="getBlogList" parameterType="Map" resultMap="ResultMapWithBLOBs">
  	SELECT b.*, 
  	(SELECT COUNT(c.id) FROM comment c WHERE c.blog_id = b.id AND c.is_pass = 1) AS commentsCount
    FROM blog b
  	<include refid="WhereClause"/>
  	ORDER BY b.release_date DESC
  	<if test="start!=null and size!=null">
  		LIMIT #{start},#{size}
  	</if>
  </select>
  
  <!-- 获取上一篇博客 -->
  <select id="getLastBlog" parameterType="Integer" resultMap="ResultMapWithBLOBs">
  	SELECT id, title FROM blog
  	WHERE id = (
    SELECT id FROM blog WHERE id &lt; #{id}
    ORDER BY id DESC
    LIMIT 1)
  </select>
  
  <!-- 获取下一篇博客 -->
  <select id="getNextBlog" parameterType="Integer" resultMap="ResultMapWithBLOBs">
  	SELECT id, title FROM blog
  	WHERE id = (
    SELECT id FROM blog WHERE id &gt; #{id}
    ORDER BY id DESC
    LIMIT 1)
  </select>
  
  <!-- 获取博客数 -->
  <select id="getCount" parameterType="Map" resultType="Integer">
  	SELECT COUNT(b.id) FROM blog b
  	<include refid="WhereClause"/>
  </select>
  
  <!-- 根据类别查询博客 -->
  <select id="getByTypeId" parameterType="Integer" resultMap="ResultMapWithBLOBs">
  	SELECT
    <include refid="Base_Column_List"/>
    FROM blog
  	WHERE type_id = #{typeId}
  </select>
  
  <!-- 根据时间查询博客 -->
  <select id="getByDate" resultMap="ResultMapWithBLOBs">
  	SELECT release_date, DATE_FORMAT(release_date,'%Y年%m月') AS releaseDateStr, COUNT(id) AS count 
  	FROM blog
  	GROUP BY DATE_FORMAT(release_date,'%Y年%m月')
	ORDER BY DATE_FORMAT(release_date,'%Y年%m月') DESC
  </select>
  
  <!-- 查询前6条评论数高的博客 -->
   <select id="getTopReview" resultMap="ResultMapWithBLOBs">
  	SELECT b.id, b.title,
  	(SELECT COUNT(c.id) FROM comment c WHERE c.blog_id = b.id AND c.is_pass = 1) AS commentsCount
  	FROM blog b
  	ORDER BY commentsCount DESC
  	LIMIT 6
  </select>
  
   <!-- 查询前6条阅读量高的博客 -->
   <select id="getTopReading" resultMap="ResultMapWithBLOBs">
  	SELECT id, title, reading FROM blog
  	ORDER BY reading DESC
  	LIMIT 6
  </select>
</mapper>